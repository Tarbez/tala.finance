{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","alert","App","state","loaded","totalSupply","userTala","userETH","rate","buyAmountETH","deposit","withdraw","stakeBalance","rewardBalance","componentDidMount","toWei","utils","fromWei","eth","getAccounts","accounts","net","getId","networkId","tokenInstance","Contract","TalaToken","abi","networks","address","saleInstance","CrowdSale","poolInstance","TalaPool","listenToTokenTransfer","setState","updateTokens","updateRate","error","methods","call","balanceOf","getBalance","from","handleInputChange","event","target","value","type","checked","name","events","Transfer","to","on","Deposit","handleBuyTokens","Number","buyAmountWei","String","buyTokens","send","handleDeposit","amountWei","allowance","_address","increaseAllowance","toBN","depositStake","handleWithdraw","withdrawStake","handleClaim","claimReward","handleMax","this","className","class","href","rel","toPrecision","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bdcb66e.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to Infura RPC...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"https://ropsten.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\" // MetaMask key\r\n        );\r\n        const web3 = new Web3(provider);\r\n        alert(\"Connect to MetaMask Wallet - Ropsten Testnet\");\r\n        console.log(\"No web3 instance injected, using Infura RPC.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport TalaToken from \"./contracts/TalaToken.json\";\r\nimport CrowdSale from \"./contracts/CrowdSale.json\";\r\nimport TalaPool from \"./contracts/TalaPool.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = { loaded:false, totalSupply:0, userTala:0, userETH:0, rate:0, buyAmountETH:0.1 , deposit:0, withdraw:0, stakeBalance:0, rewardBalance:0};\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n      this.toWei = this.web3.utils.toWei;\r\n      this.fromWei = this.web3.utils.fromWei;\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instances.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n      this.tokenInstance = new this.web3.eth.Contract(\r\n        TalaToken.abi,\r\n        TalaToken.networks[this.networkId] && TalaToken.networks[this.networkId].address,\r\n      );\r\n\r\n      this.saleInstance = new this.web3.eth.Contract(\r\n        CrowdSale.abi,\r\n        CrowdSale.networks[this.networkId] && CrowdSale.networks[this.networkId].address,\r\n      );\r\n\r\n      this.poolInstance = new this.web3.eth.Contract(\r\n        TalaPool.abi,\r\n        TalaPool.networks[this.networkId] && TalaPool.networks[this.networkId].address,\r\n      );\r\n\r\n      // Set the state and run listener function\r\n      this.listenToTokenTransfer();\r\n      this.setState({ loaded: true }, () => {this.updateTokens(); this.updateRate()});\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\"Connect to Ropsten Testnet\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  updateRate = async () => {\r\n    let rate = await this.saleInstance.methods.rate().call();\r\n    this.setState({ rate: rate });\r\n  }\r\n\r\n  updateTokens = async () => {\r\n    let totalSupply = this.fromWei(await this.tokenInstance.methods.totalSupply().call());\r\n    this.setState({\r\n      totalSupply: totalSupply\r\n    });\r\n\r\n    if (this.accounts[0]) {\r\n      let userTala = this.fromWei(await this.tokenInstance.methods.balanceOf(this.accounts[0]).call());\r\n      let userETH = this.fromWei(await this.web3.eth.getBalance(this.accounts[0]));\r\n      let stakeBalance = this.fromWei(await this.poolInstance.methods.stakeBalance().call({from:this.accounts[0]}));\r\n      let rewardBalance = this.fromWei(await this.poolInstance.methods.rewardBalance().call({from:this.accounts[0]}));\r\n      this.setState({\r\n        userTala: userTala,\r\n        userETH: userETH,\r\n        stakeBalance: stakeBalance,\r\n        rewardBalance: rewardBalance\r\n      });\r\n    }\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  listenToTokenTransfer = () => {\r\n    this.tokenInstance.events.Transfer({to: this.accounts[0]}).on(\"data\", this.updateTokens);\r\n    this.poolInstance.events.Deposit({from: this.accounts[0]}).on(\"data\", this.updateTokens);\r\n  }\r\n\r\n  handleBuyTokens = async () => {\r\n    if (this.state.buyAmountETH <=0) {\r\n        return;\r\n    } else if (Number(this.state.buyAmountETH) > this.state.userETH) {\r\n        this.setState({buyAmountETH:0});\r\n    } else {\r\n      let buyAmountWei = this.toWei(String(this.state.buyAmountETH));\r\n      await this.saleInstance.methods.buyTokens(this.accounts[0]).send({ from: this.accounts[0] , value: buyAmountWei});\r\n      this.setState({buyAmountETH:0});\r\n    }\r\n  }\r\n\r\n  handleDeposit = async () => {\r\n    if (this.state.deposit <=0) {\r\n        return;\r\n    } else if (Number(this.state.deposit) > this.state.userTala) {\r\n        this.setState({deposit:0});\r\n    } else {\r\n        let amountWei = this.toWei(String(this.state.deposit));\r\n        let allowance = await this.tokenInstance.methods.allowance(this.accounts[0], this.poolInstance._address).call();\r\n        if (Number(allowance) === 0 ) {\r\n          await this.tokenInstance.methods.increaseAllowance(this.poolInstance._address, this.web3.utils.toBN(\"DD15FE86AFFAD91249EF0EB713F39EBEAA987B6E6FD2A0000000000000000000\")).send({from: this.accounts[0]}); // approve 1e77\r\n        }\r\n        await this.poolInstance.methods.depositStake(amountWei).send({from: this.accounts[0]});\r\n        this.setState({deposit:0});\r\n    }\r\n  }\r\n\r\n  handleWithdraw = async () => {\r\n    if (this.state.withdraw <=0) {\r\n        return;\r\n    } else if (Number(this.state.withdraw) > this.state.stakeBalance) {\r\n        this.setState({withdraw:0});\r\n    } else {\r\n        let amountWei = this.toWei(String(this.state.withdraw));\r\n        await this.poolInstance.methods.withdrawStake(amountWei).send({from: this.accounts[0]});\r\n        this.setState({withdraw:0});\r\n    }\r\n  }\r\n\r\n  handleClaim = async () => {\r\n    await this.poolInstance.methods.claimReward().send({from: this.accounts[0]});\r\n  }\r\n\r\n  handleMax = async (event) => {\r\n    const name = event.target.name;\r\n    switch(name) {\r\n      case \"buyAmountETH\":\r\n        this.setState({buyAmountETH: this.state.userETH});\r\n        break;\r\n      case \"deposit\":\r\n        this.setState({deposit: this.state.userTala});\r\n        break;\r\n      case \"withdraw\":\r\n        this.setState({withdraw: this.state.stakeBalance});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    if (!this.state.loaded) {\r\n      // return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <div class=\"gold\">\r\n          <h1>Tala Finance</h1>\r\n          <p>Deployed on Ropsten Testnet <a href=\"https://faucet.dimensions.network/\" target=\"_blank\" rel=\"noopener noreferrer\">[get test Ether]</a></p>\r\n          <p class=\"small\">TALA Address: <a href=\"https://ropsten.etherscan.io/token/0x17064212fe45446289fa6a598b206dd599e79b07\" target=\"_blank\" rel=\"noopener noreferrer\">0x17064212fe45446289fA6a598B206DD599e79B07</a></p>\r\n        </div>\r\n        <div class=\"rcorners\">\r\n          <h2>Swap ETH for TALA</h2>\r\n          <h3>1 ETH = {this.state.rate} TALA</h3>\r\n          <h4>Total Supply: {Number(this.state.totalSupply).toPrecision(10)}</h4>\r\n          <p>In Wallet: {Number(this.state.userTala).toPrecision(5)} TALA & {Number(this.state.userETH).toPrecision(5)} ETH</p>\r\n          <input type=\"text\" class=\"input\" name=\"buyAmountETH\" value={this.state.buyAmountETH} onChange={this.handleInputChange} />\r\n          <button type=\"button\" class=\"buttonM gold\" name=\"buyAmountETH\" onClick={this.handleMax}>Max</button>\r\n          <button type=\"button\" class=\"button gold\" onClick={this.handleBuyTokens}>Swap ETH</button>\r\n        </div>\r\n        <br></br>\r\n        <div class=\"rcorners\">\r\n          <h2>Stake TALA, Earn Reward</h2>\r\n          <p>Deposit Balance: {Number(this.state.stakeBalance).toPrecision(5)} TALA</p>\r\n          <input type=\"text\" class=\"input\" name=\"deposit\" value={this.state.deposit} onChange={this.handleInputChange} />\r\n          <button type=\"button\" class=\"buttonM gold\" name=\"deposit\" onClick={this.handleMax}>Max</button>\r\n          <button type=\"button\" class=\"button gold\" onClick={this.handleDeposit}>Deposit</button>\r\n          <br></br>\r\n          <input type=\"text\" class=\"input\" name=\"withdraw\" value={this.state.withdraw} onChange={this.handleInputChange}/>\r\n          <button type=\"button\" class=\"buttonM gold\" name=\"withdraw\" onClick={this.handleMax}>Max</button>\r\n          <button type=\"button\" class=\"button gold\" onClick={this.handleWithdraw}>Withdraw</button>\r\n          <p>Reward Balance: {Number(this.state.rewardBalance).toPrecision(5)} TALA</p>\r\n          <button type=\"button\" class=\"gold\" onClick={this.handleClaim}>Claim Reward</button>\r\n        </div>\r\n        <br></br>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}